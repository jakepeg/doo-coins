{"version":3,"sources":["webpack://doocoins/./src/pages/add_child.js"],"names":["Main","styled","ProfilePicture","DataList","ContactCard","card","data","Object","entries","map","value","console","log","_field","key","style","maxWidth","src","atob","_data","alt","href","encodeURIComponent","toString","download","React","image","setImage","setCard","actor","setActor","then","module","default","onSubmit","e","preventDefault","email","target","querySelector","get","returnedCard","length","alert","vCard","htmlFor","type","name","id","inputs","querySelectorAll","forEach","input","names","split","arr","Array","reverse","idx","add","join","btoa","mediatype","set","JSON","stringify","toJSON","autoComplete","accept","onChange","file","files","reader","FileReader","addEventListener","result","readAsDataURL","required"],"mappings":"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","file":"component---src-pages-add-child-js-4da81cc20bc60d9cc197.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport vCard from \"vcf\";\n\n// styles\nconst Main = styled.main`\n  color: \"#232129\";\n  padding: 96;\n  font-family: \"-apple-system, Roboto, sans-serif, serif\";\n  width: fit-content;\n\n  fieldset,\n  label {\n    display: flex;\n    flex-direction: column;\n  }\n  input {\n    min-width: 280px;\n    width: fit-content;\n  }\n`;\n\nconst ProfilePicture = styled.picture`\n  display: flex;\n  width: 256px;\n  img {\n    width: 100%;\n  }\n`;\n\nconst DataList = styled.dl`\n  display: grid;\n  grid-template-columns: auto auto;\n  dt,\n  dd {\n    /* width: fit-content; */\n    display: inline-flex;\n    border: 1px solid black;\n    padding: 4px;\n    margin: 0;\n    padding-right: 16px;\n  }\n  picture,\n  image {\n    max-width: 75px;\n  }\n`;\n\nconst ContactCard = ({ card }) => {\n  if (!card || !card.data) return null;\n  return (\n    <section>\n      <DataList>\n        {Object.entries(card.data).map(([key, value]) => {\n          const [_field, _data] = value;\n          console.log(value);\n          if (value._field === \"photo\") {\n            return (\n              <React.Fragment key={value._field}>\n                <dt>{value._field}</dt>\n                <dd>\n                  <ProfilePicture>\n                    <img\n                      style={{ maxWidth: \"75px\" }}\n                      src={atob(value._data)}\n                      alt=\"profile\"\n                    />\n                  </ProfilePicture>\n                </dd>\n              </React.Fragment>\n            );\n          } else {\n            return (\n              <>\n                <dt>{value._field}</dt>\n                <dd>{value._data}</dd>\n              </>\n            );\n          }\n        })}\n      </DataList>\n      <a\n        href={`data:text/plain;charset=utf-8,${encodeURIComponent(\n          card.toString()\n        )}`}\n        download=\"contact.vcf\"\n      >\n        Download VCF\n      </a>\n    </section>\n  );\n};\n\n// markup\nconst IndexPage = () => {\n  const [image, setImage] = React.useState(\"\");\n  const [card, setCard] = React.useState(null);\n  const [actor, setActor] = React.useState(null);\n\n  React.useEffect(() => {\n    import(\"../actor\").then((module) => {\n      setActor(module.default);\n    });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const card = new vCard();\n    const inputs = e.target.querySelectorAll(\"input\");\n    const email = e.target.querySelector('input[name=\"email\"]').value;\n    inputs.forEach((input) => {\n      if (input.name === \"photo\") return;\n      else if (input.name === \"n\") {\n        // Take full input and format for vcf\n        const names = input.value.split(\" \");\n        const arr = new Array(5);\n\n        names.reverse().forEach((name, idx) => {\n          arr[idx] = name;\n        });\n\n        card.add(\"fn\", input.value);\n        card.add(input.name, arr.join(\";\"));\n      } else {\n        card.add(input.name, input.value);\n      }\n    });\n    card.add(\"photo\", btoa(image), { mediatype: \"image/gif\" });\n\n    actor?.set(email, JSON.stringify(card.toJSON())).then(() => {\n      alert(\"card uploaded!\");\n      inputs.forEach((input) => {\n        input.value = \"\";\n      });\n      setImage(\"\");\n    });\n\n    return false;\n  }\n\n  function handleUpload(e) {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      \"load\",\n      function () {\n        // convert image file to base64 string\n        setImage(reader.result);\n      },\n      false\n    );\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }\n\n  function getCard(e) {\n    e.preventDefault();\n    const email = e.target.querySelector('input[name=\"emailsearch\"]').value;\n\n    actor?.get(email).then((returnedCard) => {\n      if (!returnedCard.length) {\n        return alert(\"No contact found for that email\");\n      }\n      setCard(vCard.fromJSON(returnedCard[0]));\n      console.log(returnedCard);\n    });\n    return false;\n  }\n\n  return (\n    <Main>\n      <title>Contact Book</title>\n      <h1>Internet Computer Address Book</h1>\n      <section>\n        <h2>Look up a contact by email</h2>\n        <form onSubmit={getCard}>\n          <label htmlFor=\"emailsearch\">\n            <input type=\"email\" name=\"emailsearch\" id=\"emailsearch\" />\n          </label>\n          <button type=\"submit\">Search</button>\n        </form>\n      </section>\n      {/* Card Display */}\n      <ContactCard card={card} />\n\n      <form onSubmit={handleSubmit}>\n        <h2>Add a Contact</h2>\n        <fieldset>\n          <h3>Personal Information</h3>\n          <label htmlFor=\"n\">\n            Full Name\n            <input type=\"text\" name=\"n\" autoComplete=\"name\" />\n          </label>\n          <label htmlFor=\"org\">\n            Organziation\n            <input type=\"text\" name=\"org\" autoComplete=\"organization\" />\n          </label>\n          <label htmlFor=\"title\">\n            Title\n            <input type=\"text\" name=\"title\" autoComplete=\"organization-title\" />\n          </label>\n        </fieldset>\n        <fieldset>\n          <h3>Profile photo</h3>\n          <label htmlFor=\"photo\">\n            Upload an image\n            <input\n              type=\"file\"\n              id=\"img\"\n              name=\"photo\"\n              accept=\"image/*\"\n              onChange={handleUpload}\n            />\n          </label>\n          {image ? (\n            <ProfilePicture>\n              <img src={image} alt=\"user-uploaded profile image\" />\n            </ProfilePicture>\n          ) : null}\n        </fieldset>\n        <fieldset>\n          <h3>Contact</h3>\n          <label htmlFor=\"tel\">\n            Phone number\n            <input type=\"text\" name=\"tel\" />\n          </label>\n          <label htmlFor=\"adr\">\n            Address\n            <input type=\"text\" name=\"adr\" autoComplete=\"on\" />\n          </label>\n          <label htmlFor=\"email\">\n            Email\n            <input required type=\"email\" name=\"email\" autoComplete=\"email\" />\n          </label>\n        </fieldset>\n        <button type=\"submit\">Submit Contact</button>\n      </form>\n    </Main>\n  );\n};\n\nexport default IndexPage;"],"sourceRoot":""}