{"version":3,"sources":["webpack://doocoins/./node_modules/react-uuid/uuid.js","webpack://doocoins/./src/components/ChildList.js","webpack://doocoins/./src/components/AddChild.js","webpack://doocoins/./src/pages/index.js"],"names":["module","exports","hashTable","uuid","i","Math","floor","random","length","join","React","actor","setActor","then","default","getChildren","returnedChilren","alert","console","log","className","onSubmit","e","preventDefault","child","target","querySelector","value","getChild","returnedChild","htmlFor","type","name","id","image","setImage","inputs","querySelectorAll","child_id","child_name","child_info","push","btoa","addChild","JSON","stringify","forEach","input","autoComplete","accept","onChange","file","files","reader","FileReader","addEventListener","result","readAsDataURL","src","alt"],"mappings":"wFAoBAA,EAAOC,QAfP,WAIE,IAHA,IAAIC,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxFC,EAAO,GAEFC,EAAI,EAAGA,EAAI,GAAIA,IAEpBD,EAAKC,GADG,IAANA,GAAiB,KAANA,GAAkB,KAANA,GAAkB,KAANA,EAC3B,IAEAF,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,OAAS,IAItE,OAAOL,EAAKM,KAAK,M,6FC0DnB,EAtEkB,WAEhB,MAA0BC,WAAe,MAAlCC,EAAP,KAAcC,EAAd,KAmCA,OAjCAF,aAAgB,WACd,8BAAmBG,MAAK,SAACb,GACvBY,EAASZ,EAAOc,SAMlBH,WAAOI,cAAcF,MAAK,SAACG,GACzB,IAAKA,EAAgBR,OACnB,OAAOS,MAAM,6CAEfC,QAAQC,IAAIH,WAPb,IA6BC,+BACE,yCACA,uBAAKI,UAAU,WAIf,uBAAKA,UAAU,oBAWb,uBAAKA,UAAU,mBAAf,YACA,uBAAKA,UAAU,mBAAf,yBACA,uBAAKA,UAAU,mBAAf,oBAGF,wBAAMC,SAvCZ,SAAkBC,GAChBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,cAAc,0BAA0BC,MAS/D,OAPAhB,WAAOiB,SAASJ,GAAOX,MAAK,SAACgB,GAC3B,IAAKA,EAAcrB,OACjB,OAAOS,MAAM,4BAGfC,QAAQC,IAAIU,OAEP,IA6BD,yBAAOC,QAAQ,YACb,yBAAOC,KAAK,OAAOC,KAAK,WAAWC,GAAG,cAExC,0BAAQF,KAAK,UAAb,sB,mBCmBV,EAnFiB,WACf,MAA0BrB,WAAe,IAAlCwB,EAAP,KAAcC,EAAd,KACA,EAA0BzB,WAAe,MAAlCC,EAAP,KAAcC,EAAd,KAkDA,OAhDAF,aAAgB,WACd,8BAAmBG,MAAK,SAACb,GACvBY,EAASZ,EAAOc,cAEjB,IA6CD,+BACE,yCACA,wBAAMO,SA7CV,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMa,EAASd,EAAEG,OAAOY,iBAAiB,SACnCC,EAAYnC,MACZoC,EAAajB,EAAEG,OAAOC,cAAc,4BAA4BC,MAChEa,EAAa,GAiBnB,OAfAA,EAAWC,KAAKF,GAChBC,EAAWC,KAFY,GAInBP,GACFM,EAAWC,KAAKC,KAAKR,IAErBvB,WAAOgC,SAASL,EAAUM,KAAKC,UAAUL,IAAa3B,MAAK,WAC3DI,MAAM,gBAENmB,EAAOU,SAAQ,SAACC,GACdA,EAAMpB,MAAQ,MAEhBQ,EAAS,QAGJ,IAuBD,yBAAOL,QAAQ,cAAf,OAEE,yBAAOC,KAAK,OAAOC,KAAK,aAAagB,aAAa,UAEpD,2BAAM,2BACN,yBAAOlB,QAAQ,eAAf,kBACiB,2BAAM,2BACrB,yBACEC,KAAK,OACLE,GAAG,MACHD,KAAK,cACLiB,OAAO,UACPC,SAhCZ,SAAsB5B,GACpB,IAAM6B,EAAO7B,EAAEG,OAAO2B,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,iBACL,QACA,WAEEpB,EAASkB,EAAOG,WAElB,GAEEL,GACHE,EAAOI,cAAcN,OAuBfjB,EAEG,uBAAKwB,IAAKxB,EAAOyB,IAAI,gBAErB,KACJ,2BAAM,2BACR,0BAAQ5B,KAAK,UAAb,gBC9DR,EAhBkB,WAEhB,OACE,gCACE,yCACA,sCACA,+BACE,gBAAC,EAAD,OAEF,+BACE,gBAAC,EAAD","file":"component---src-pages-index-js-c41bbe50baa383a1f120.js","sourcesContent":["/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nfunction uuid() {\n  var hashTable = ['a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  var uuid = [];\n\n  for (var i = 0; i < 35; i++) {\n    if (i === 7 || i === 12 || i === 17 || i === 22) {\n      uuid[i] = '-';\n    } else {\n      uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)];\n    }\n  }\n\n  return uuid.join('');\n}\n\nmodule.exports = uuid;","import * as React from \"react\";\nimport './childlist.css';\n\nconst image_data = \"\";\n\nconst ChildList = () => {\n\n  const [actor, setActor] = React.useState(null);\n\n  React.useEffect(() => {\n    import(\"../actor\").then((module) => {\n      setActor(module.default);\n      getChildren();\n    });\n  }, []);\n\n  function getChildren() {\n    actor?.getChildren().then((returnedChilren) => {\n      if (!returnedChilren.length) {\n        return alert(\"No children - please add a child to begin\");\n      }\n      console.log(returnedChilren);\n    });\n    return false;\n  }\n\n  function getChild(e) {\n    e.preventDefault();\n    const child = e.target.querySelector('input[name=\"child_id\"]').value;\n\n    actor?.getChild(child).then((returnedChild) => {\n      if (!returnedChild.length) {\n        return alert(\"No children with that ID\");\n      }\n\n      console.log(returnedChild);\n    });\n    return false;\n  }\n\n  // const ProfilePic = ({ data }) => <img src={`data:image/jpeg;base64,${data}`} />\n\n  return (\n      <section>\n        <h2>My Children</h2>\n        <div className=\"section\">\n\n{/* TODO - pull data from returnedChilren into the grid below */}\n\n        <div className=\"col grid_1_of_4\">\n\n        {/* <ProfilePic data={image_data} /> */}\n\n{/* BUG with atob. deployment fails, hack = comment out img tag, dfx deploy, then uncomment */}\n          {/* <img\n              style={{ maxWidth: \"75px\" }}\n              src={atob(image_data)}\n              alt=\"profile\"\n            />  */}\n          </div>\n          <div className=\"col grid_1_of_4\"> Elodie </div>\n          <div className=\"col grid_1_of_4\"> DooCoins balance: 0 </div>\n          <div className=\"col grid_1_of_4\"> Edit / Delete </div>\n        </div>\n\n        <form onSubmit={getChild}>\n          <label htmlFor=\"child_id\">\n            <input type=\"text\" name=\"child_id\" id=\"child_id\" />\n          </label>\n          <button type=\"submit\">Search children</button>\n        </form>\n      </section>\n  );\n};\n\nexport default ChildList;","import * as React from \"react\";\nimport uuid from 'react-uuid'\n\n\n\nconst AddChild = () => {\n  const [image, setImage] = React.useState(\"\");\n  const [actor, setActor] = React.useState(null);\n\n  React.useEffect(() => {\n    import(\"../actor\").then((module) => {\n      setActor(module.default);\n    });\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const inputs = e.target.querySelectorAll(\"input\");\n    const child_id =  uuid();\n    const child_name = e.target.querySelector('input[name=\"child_name\"]').value;\n    const child_info = [];\n    const wallet_balance = 0\n    child_info.push(child_name);\n    child_info.push(wallet_balance);\n\n    if (image) {\n      child_info.push(btoa(image));\n    }\n      actor?.addChild(child_id, JSON.stringify(child_info)).then(() => {\n      alert(\"Child Added!\");\n      // clear the form\n      inputs.forEach((input) => {\n        input.value = \"\";\n      });\n      setImage(\"\");\n    });\n\n    return false;\n  }\n\n  function handleUpload(e) {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      function () {\n        // convert image file to base64 string\n        setImage(reader.result);\n      },\n      false\n    );\n    if (file) {\n     reader.readAsDataURL(file);\n    }\n  }\n\n  return (\n    <section>\n      <h2>Add a child</h2>\n      <form onSubmit={handleSubmit}>\n          <label htmlFor=\"child_name\">\n            Name\n            <input type=\"text\" name=\"child_name\" autoComplete=\"name\" />\n          </label>\n          <br /><br />\n          <label htmlFor=\"child_photo\">\n            Profile picture<br /><br />\n            <input\n              type=\"file\"\n              id=\"img\"\n              name=\"child_photo\"\n              accept=\"image/*\"\n              onChange={handleUpload}\n            />\n          </label>\n          {image ? (\n\n              <img src={image} alt=\"profile pic\" />\n\n          ) : null}\n          <br /><br />\n        <button type=\"submit\">Add Child</button>\n      </form>\n    </section>\n  );\n};\n\nexport default AddChild;","import * as React from \"react\";\nimport ChildList from \"../components/ChildList\";\nimport AddChild from \"../components/AddChild\";\n\nconst IndexPage = () => {\n\n  return (\n    <>\n      <title>DooCoins</title>\n      <h1>DooCoins</h1>\n      <section>\n        <ChildList />\n      </section>\n      <section>\n        <AddChild />\n      </section>\n    </>\n  );\n};\n\nexport default IndexPage;"],"sourceRoot":""}